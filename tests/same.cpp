#include "test.hpp"

TEST_CASE("TTac adjacency and opposite macros for same type", "[ttac]") {
  SECTION("Adjacent edges") {
    REQUIRE_ADJ_SAME(TTAC_TOP, TTAC_LEFT);
    REQUIRE_ADJ_SAME(TTAC_TOP, TTAC_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_BOTTOM, TTAC_LEFT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM, TTAC_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_LEFT, TTAC_TOP);
    REQUIRE_ADJ_SAME(TTAC_RIGHT, TTAC_TOP);

    REQUIRE_ADJ_SAME(TTAC_LEFT, TTAC_BOTTOM);
    REQUIRE_ADJ_SAME(TTAC_RIGHT, TTAC_BOTTOM);

    REQUIRE_ADJ_SAME_FALSE(TTAC_TOP, TTAC_BOTTOM);
    REQUIRE_ADJ_SAME_FALSE(TTAC_BOTTOM, TTAC_TOP);

    REQUIRE_ADJ_SAME_FALSE(TTAC_LEFT, TTAC_RIGHT);
    REQUIRE_ADJ_SAME_FALSE(TTAC_RIGHT, TTAC_LEFT);
  }

  SECTION("Opposite edges") {
    REQUIRE_OPP_SAME(TTAC_TOP, TTAC_BOTTOM);
    REQUIRE_OPP_SAME(TTAC_LEFT, TTAC_RIGHT);

    REQUIRE_OPP_SAME(TTAC_BOTTOM, TTAC_TOP);
    REQUIRE_OPP_SAME(TTAC_RIGHT, TTAC_LEFT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP, TTAC_LEFT);
    REQUIRE_OPP_SAME_FALSE(TTAC_LEFT, TTAC_TOP);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP, TTAC_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_RIGHT, TTAC_TOP);

    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM, TTAC_LEFT);
    REQUIRE_OPP_SAME_FALSE(TTAC_LEFT, TTAC_BOTTOM);

    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM, TTAC_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_RIGHT, TTAC_BOTTOM);
  }

  SECTION("Adjacent corners") {
    REQUIRE_ADJ_SAME(TTAC_TOP_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM_LEFT, TTAC_BOTTOM_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_TOP_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM_LEFT);

    REQUIRE_ADJ_SAME(TTAC_TOP_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_SAME(TTAC_TOP_RIGHT, TTAC_BOTTOM_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_BOTTOM_LEFT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM_RIGHT, TTAC_TOP_RIGHT);

    REQUIRE_ADJ_SAME_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_ADJ_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP_LEFT);

    REQUIRE_ADJ_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP_RIGHT);
  }

  SECTION("Opposite corners") {
    REQUIRE_OPP_SAME(TTAC_TOP_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_SAME(TTAC_TOP_RIGHT, TTAC_BOTTOM_LEFT);

    REQUIRE_OPP_SAME(TTAC_BOTTOM_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_OPP_SAME(TTAC_BOTTOM_LEFT, TTAC_TOP_RIGHT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_TOP_LEFT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP_LEFT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP_RIGHT);

    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM_LEFT);
  }
}
