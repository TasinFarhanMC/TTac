#include <test.hpp>

TEST_CASE("SAME", "[SAME]") {
  // Edge <-> Edge ordered permutations (4 * 3 = 12)
  REQUIRE_SAME(TTAC_LEFT, TTAC_RIGHT);
  REQUIRE_SAME(TTAC_LEFT, TTAC_TOP);
  REQUIRE_SAME(TTAC_LEFT, TTAC_BOTTOM);

  REQUIRE_SAME(TTAC_RIGHT, TTAC_LEFT);
  REQUIRE_SAME(TTAC_RIGHT, TTAC_TOP);
  REQUIRE_SAME(TTAC_RIGHT, TTAC_BOTTOM);

  REQUIRE_SAME(TTAC_TOP, TTAC_LEFT);
  REQUIRE_SAME(TTAC_TOP, TTAC_RIGHT);
  REQUIRE_SAME(TTAC_TOP, TTAC_BOTTOM);

  REQUIRE_SAME(TTAC_BOTTOM, TTAC_LEFT);
  REQUIRE_SAME(TTAC_BOTTOM, TTAC_RIGHT);
  REQUIRE_SAME(TTAC_BOTTOM, TTAC_TOP);

  // Corner <-> Corner ordered permutations (4 * 3 = 12)
  REQUIRE_SAME(TTAC_TOP_LEFT, TTAC_TOP_RIGHT);
  REQUIRE_SAME(TTAC_TOP_LEFT, TTAC_BOTTOM_LEFT);
  REQUIRE_SAME(TTAC_TOP_LEFT, TTAC_BOTTOM_RIGHT);

  REQUIRE_SAME(TTAC_TOP_RIGHT, TTAC_TOP_LEFT);
  REQUIRE_SAME(TTAC_TOP_RIGHT, TTAC_BOTTOM_LEFT);
  REQUIRE_SAME(TTAC_TOP_RIGHT, TTAC_BOTTOM_RIGHT);

  REQUIRE_SAME(TTAC_BOTTOM_LEFT, TTAC_TOP_LEFT);
  REQUIRE_SAME(TTAC_BOTTOM_LEFT, TTAC_TOP_RIGHT);
  REQUIRE_SAME(TTAC_BOTTOM_LEFT, TTAC_BOTTOM_RIGHT);

  REQUIRE_SAME(TTAC_BOTTOM_RIGHT, TTAC_TOP_LEFT);
  REQUIRE_SAME(TTAC_BOTTOM_RIGHT, TTAC_TOP_RIGHT);
  REQUIRE_SAME(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM_LEFT);

  REQUIRE_SAME_FALSE(TTAC_LEFT, TTAC_TOP_LEFT);
  REQUIRE_SAME_FALSE(TTAC_LEFT, TTAC_TOP_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_LEFT, TTAC_BOTTOM_LEFT);
  REQUIRE_SAME_FALSE(TTAC_LEFT, TTAC_BOTTOM_RIGHT);

  REQUIRE_SAME_FALSE(TTAC_RIGHT, TTAC_TOP_LEFT);
  REQUIRE_SAME_FALSE(TTAC_RIGHT, TTAC_TOP_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_RIGHT, TTAC_BOTTOM_LEFT);
  REQUIRE_SAME_FALSE(TTAC_RIGHT, TTAC_BOTTOM_RIGHT);

  REQUIRE_SAME_FALSE(TTAC_TOP, TTAC_TOP_LEFT);
  REQUIRE_SAME_FALSE(TTAC_TOP, TTAC_TOP_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_TOP, TTAC_BOTTOM_LEFT);
  REQUIRE_SAME_FALSE(TTAC_TOP, TTAC_BOTTOM_RIGHT);

  REQUIRE_SAME_FALSE(TTAC_BOTTOM, TTAC_TOP_LEFT);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM, TTAC_TOP_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM, TTAC_BOTTOM_LEFT);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM, TTAC_BOTTOM_RIGHT);

  // Corner -> Edge (16)
  REQUIRE_SAME_FALSE(TTAC_TOP_LEFT, TTAC_LEFT);
  REQUIRE_SAME_FALSE(TTAC_TOP_LEFT, TTAC_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_TOP_LEFT, TTAC_TOP);
  REQUIRE_SAME_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM);

  REQUIRE_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_LEFT);
  REQUIRE_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_TOP);
  REQUIRE_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM);

  REQUIRE_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_LEFT);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_BOTTOM);

  REQUIRE_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_LEFT);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_RIGHT);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP);
  REQUIRE_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM);
}

TEST_CASE("ADJACENT & OPPOSITE", "[SAME]") {
  SECTION("ADJACENT EDGE") {
    REQUIRE_ADJ_SAME(TTAC_TOP, TTAC_LEFT);
    REQUIRE_ADJ_SAME(TTAC_TOP, TTAC_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_BOTTOM, TTAC_LEFT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM, TTAC_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_LEFT, TTAC_TOP);
    REQUIRE_ADJ_SAME(TTAC_RIGHT, TTAC_TOP);

    REQUIRE_ADJ_SAME(TTAC_LEFT, TTAC_BOTTOM);
    REQUIRE_ADJ_SAME(TTAC_RIGHT, TTAC_BOTTOM);

    REQUIRE_ADJ_SAME_FALSE(TTAC_TOP, TTAC_BOTTOM);
    REQUIRE_ADJ_SAME_FALSE(TTAC_BOTTOM, TTAC_TOP);

    REQUIRE_ADJ_SAME_FALSE(TTAC_LEFT, TTAC_RIGHT);
    REQUIRE_ADJ_SAME_FALSE(TTAC_RIGHT, TTAC_LEFT);
  }

  SECTION("OPPOSITE EDGE") {
    REQUIRE_OPP_SAME(TTAC_TOP, TTAC_BOTTOM);
    REQUIRE_OPP_SAME(TTAC_LEFT, TTAC_RIGHT);

    REQUIRE_OPP_SAME(TTAC_BOTTOM, TTAC_TOP);
    REQUIRE_OPP_SAME(TTAC_RIGHT, TTAC_LEFT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP, TTAC_LEFT);
    REQUIRE_OPP_SAME_FALSE(TTAC_LEFT, TTAC_TOP);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP, TTAC_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_RIGHT, TTAC_TOP);

    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM, TTAC_LEFT);
    REQUIRE_OPP_SAME_FALSE(TTAC_LEFT, TTAC_BOTTOM);

    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM, TTAC_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_RIGHT, TTAC_BOTTOM);
  }

  SECTION("ADJACENT CORNER") {
    REQUIRE_ADJ_SAME(TTAC_TOP_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM_LEFT, TTAC_BOTTOM_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_TOP_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM_LEFT);

    REQUIRE_ADJ_SAME(TTAC_TOP_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_SAME(TTAC_TOP_RIGHT, TTAC_BOTTOM_RIGHT);

    REQUIRE_ADJ_SAME(TTAC_BOTTOM_LEFT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_SAME(TTAC_BOTTOM_RIGHT, TTAC_TOP_RIGHT);

    REQUIRE_ADJ_SAME_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_ADJ_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP_LEFT);

    REQUIRE_ADJ_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP_RIGHT);
  }

  SECTION("OPPOSITE CORNER") {
    REQUIRE_OPP_SAME(TTAC_TOP_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_SAME(TTAC_TOP_RIGHT, TTAC_BOTTOM_LEFT);

    REQUIRE_OPP_SAME(TTAC_BOTTOM_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_OPP_SAME(TTAC_BOTTOM_LEFT, TTAC_TOP_RIGHT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_TOP_LEFT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP_LEFT);

    REQUIRE_OPP_SAME_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP_RIGHT);

    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_SAME_FALSE(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM_LEFT);
  }
}
