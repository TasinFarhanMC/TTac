#include "test.hpp"
#include "ttac.h"
#include <catch2/catch_test_macros.hpp>

TEST_CASE("TTac adjacency and opposite macros for different type", "[ttac]") {
  SECTION("Adjacent") {
    // TOP_LEFT
    REQUIRE_ADJ_DIFF(TTAC_TOP_LEFT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_LEFT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_TOP_LEFT, TTAC_TOP);
    REQUIRE_ADJ_DIFF(TTAC_TOP, TTAC_TOP_LEFT);

    // TOP_RIGHT
    REQUIRE_ADJ_DIFF(TTAC_TOP_RIGHT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_RIGHT, TTAC_TOP_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_TOP_RIGHT, TTAC_TOP);
    REQUIRE_ADJ_DIFF(TTAC_TOP, TTAC_TOP_RIGHT);

    // BOTTOM_RIGHT
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_RIGHT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_RIGHT, TTAC_BOTTOM_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM, TTAC_BOTTOM_RIGHT);

    // BOTTOM_LEFT
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_LEFT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_LEFT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM, TTAC_BOTTOM_LEFT);

    // TOP_LEFT false (not adjacent to RIGHT, BOTTOM)
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM, TTAC_TOP_LEFT);

    // TOP_RIGHT false (not adjacent to LEFT, BOTTOM)
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM, TTAC_TOP_RIGHT);

    // BOTTOM_RIGHT false (not adjacent to LEFT, TOP)
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP, TTAC_BOTTOM_RIGHT);

    // BOTTOM_LEFT false (not adjacent to RIGHT, TOP)
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_RIGHT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP, TTAC_BOTTOM_LEFT);
  }

  SECTION("Opposite") {
    // TOP_LEFT (opposite: RIGHT, BOTTOM)
    REQUIRE_OPP_DIFF(TTAC_TOP_LEFT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_OPP_DIFF(TTAC_TOP_LEFT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM, TTAC_TOP_LEFT);

    // TOP_RIGHT (opposite: LEFT, BOTTOM)
    REQUIRE_OPP_DIFF(TTAC_TOP_RIGHT, TTAC_LEFT);
    REQUIRE_OPP_DIFF(TTAC_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_TOP_RIGHT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM, TTAC_TOP_RIGHT);

    // BOTTOM_RIGHT (opposite: LEFT, TOP)
    REQUIRE_OPP_DIFF(TTAC_BOTTOM_RIGHT, TTAC_LEFT);
    REQUIRE_OPP_DIFF(TTAC_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM_RIGHT, TTAC_TOP);
    REQUIRE_OPP_DIFF(TTAC_TOP, TTAC_BOTTOM_RIGHT);

    // BOTTOM_LEFT (opposite: RIGHT, TOP)
    REQUIRE_OPP_DIFF(TTAC_BOTTOM_LEFT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_RIGHT, TTAC_BOTTOM_LEFT);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM_LEFT, TTAC_TOP);
    REQUIRE_OPP_DIFF(TTAC_TOP, TTAC_BOTTOM_LEFT);

    // TOP_LEFT (not opposite to LEFT, TOP)
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_LEFT, TTAC_TOP_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_TOP);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP, TTAC_TOP_LEFT);

    // TOP_RIGHT (not opposite to RIGHT, TOP)
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_RIGHT, TTAC_TOP_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_TOP);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP, TTAC_TOP_RIGHT);

    // BOTTOM_RIGHT (not opposite to RIGHT, BOTTOM)
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_RIGHT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM, TTAC_BOTTOM_RIGHT);

    // BOTTOM_LEFT (not opposite to LEFT, BOTTOM)
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM, TTAC_BOTTOM_LEFT);
  }
}
