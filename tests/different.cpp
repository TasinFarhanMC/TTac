#include <test.hpp>

TEST_CASE("DIFFERENT", "[DIFFERENT]") {
  // Edge -> Corner (4 * 4 = 16)
  REQUIRE_DIFF(TTAC_LEFT, TTAC_TOP_LEFT);
  REQUIRE_DIFF(TTAC_LEFT, TTAC_TOP_RIGHT);
  REQUIRE_DIFF(TTAC_LEFT, TTAC_BOTTOM_LEFT);
  REQUIRE_DIFF(TTAC_LEFT, TTAC_BOTTOM_RIGHT);

  REQUIRE_DIFF(TTAC_RIGHT, TTAC_TOP_LEFT);
  REQUIRE_DIFF(TTAC_RIGHT, TTAC_TOP_RIGHT);
  REQUIRE_DIFF(TTAC_RIGHT, TTAC_BOTTOM_LEFT);
  REQUIRE_DIFF(TTAC_RIGHT, TTAC_BOTTOM_RIGHT);

  REQUIRE_DIFF(TTAC_TOP, TTAC_TOP_LEFT);
  REQUIRE_DIFF(TTAC_TOP, TTAC_TOP_RIGHT);
  REQUIRE_DIFF(TTAC_TOP, TTAC_BOTTOM_LEFT);
  REQUIRE_DIFF(TTAC_TOP, TTAC_BOTTOM_RIGHT);

  REQUIRE_DIFF(TTAC_BOTTOM, TTAC_TOP_LEFT);
  REQUIRE_DIFF(TTAC_BOTTOM, TTAC_TOP_RIGHT);
  REQUIRE_DIFF(TTAC_BOTTOM, TTAC_BOTTOM_LEFT);
  REQUIRE_DIFF(TTAC_BOTTOM, TTAC_BOTTOM_RIGHT);

  // Corner -> Edge (4 * 4 = 16)
  REQUIRE_DIFF(TTAC_TOP_LEFT, TTAC_LEFT);
  REQUIRE_DIFF(TTAC_TOP_LEFT, TTAC_RIGHT);
  REQUIRE_DIFF(TTAC_TOP_LEFT, TTAC_TOP);
  REQUIRE_DIFF(TTAC_TOP_LEFT, TTAC_BOTTOM);

  REQUIRE_DIFF(TTAC_TOP_RIGHT, TTAC_LEFT);
  REQUIRE_DIFF(TTAC_TOP_RIGHT, TTAC_RIGHT);
  REQUIRE_DIFF(TTAC_TOP_RIGHT, TTAC_TOP);
  REQUIRE_DIFF(TTAC_TOP_RIGHT, TTAC_BOTTOM);

  REQUIRE_DIFF(TTAC_BOTTOM_LEFT, TTAC_LEFT);
  REQUIRE_DIFF(TTAC_BOTTOM_LEFT, TTAC_RIGHT);
  REQUIRE_DIFF(TTAC_BOTTOM_LEFT, TTAC_TOP);
  REQUIRE_DIFF(TTAC_BOTTOM_LEFT, TTAC_BOTTOM);

  REQUIRE_DIFF(TTAC_BOTTOM_RIGHT, TTAC_LEFT);
  REQUIRE_DIFF(TTAC_BOTTOM_RIGHT, TTAC_RIGHT);
  REQUIRE_DIFF(TTAC_BOTTOM_RIGHT, TTAC_TOP);
  REQUIRE_DIFF(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM);

  // Edge <-> Edge ordered false permutations (4 * 3 = 12)
  REQUIRE_DIFF_FALSE(TTAC_LEFT, TTAC_RIGHT);
  REQUIRE_DIFF_FALSE(TTAC_LEFT, TTAC_TOP);
  REQUIRE_DIFF_FALSE(TTAC_LEFT, TTAC_BOTTOM);

  REQUIRE_DIFF_FALSE(TTAC_RIGHT, TTAC_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_RIGHT, TTAC_TOP);
  REQUIRE_DIFF_FALSE(TTAC_RIGHT, TTAC_BOTTOM);

  REQUIRE_DIFF_FALSE(TTAC_TOP, TTAC_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_TOP, TTAC_RIGHT);
  REQUIRE_DIFF_FALSE(TTAC_TOP, TTAC_BOTTOM);

  REQUIRE_DIFF_FALSE(TTAC_BOTTOM, TTAC_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_BOTTOM, TTAC_RIGHT);
  REQUIRE_DIFF_FALSE(TTAC_BOTTOM, TTAC_TOP);

  // Corner <-> Corner ordered false permutations (4 * 3 = 12)
  REQUIRE_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_TOP_RIGHT);
  REQUIRE_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM_RIGHT);

  REQUIRE_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_TOP_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM_RIGHT);

  REQUIRE_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP_RIGHT);
  REQUIRE_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_BOTTOM_RIGHT);

  REQUIRE_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP_LEFT);
  REQUIRE_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP_RIGHT);
  REQUIRE_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM_LEFT);
}

TEST_CASE("ADJACENT & OPPOSITE", "[DIFFERENT]") {
  SECTION("ADJACENT") {
    // Positive adjacency (true) — Edge <-> Corner
    REQUIRE_ADJ_DIFF(TTAC_TOP_LEFT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_LEFT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_TOP_LEFT, TTAC_TOP);
    REQUIRE_ADJ_DIFF(TTAC_TOP, TTAC_TOP_LEFT);

    REQUIRE_ADJ_DIFF(TTAC_TOP_RIGHT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_RIGHT, TTAC_TOP_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_TOP_RIGHT, TTAC_TOP);
    REQUIRE_ADJ_DIFF(TTAC_TOP, TTAC_TOP_RIGHT);

    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_RIGHT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_RIGHT, TTAC_BOTTOM_RIGHT);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM, TTAC_BOTTOM_RIGHT);

    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_LEFT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM_LEFT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF(TTAC_BOTTOM, TTAC_BOTTOM_LEFT);

    // Negative adjacency (false) — Edge <-> Corner not actually adjacent
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM, TTAC_TOP_LEFT);

    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_BOTTOM);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM, TTAC_TOP_RIGHT);

    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_TOP);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP, TTAC_BOTTOM_RIGHT);

    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_RIGHT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_RIGHT, TTAC_BOTTOM_LEFT);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_TOP);
    REQUIRE_ADJ_DIFF_FALSE(TTAC_TOP, TTAC_BOTTOM_LEFT);
  }

  SECTION("OPPOSITE") {
    // Positive opposite (true) — Edge <-> Corner
    REQUIRE_OPP_DIFF(TTAC_TOP_LEFT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_RIGHT, TTAC_TOP_LEFT);
    REQUIRE_OPP_DIFF(TTAC_TOP_LEFT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM, TTAC_TOP_LEFT);

    REQUIRE_OPP_DIFF(TTAC_TOP_RIGHT, TTAC_LEFT);
    REQUIRE_OPP_DIFF(TTAC_LEFT, TTAC_TOP_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_TOP_RIGHT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM, TTAC_TOP_RIGHT);

    REQUIRE_OPP_DIFF(TTAC_BOTTOM_RIGHT, TTAC_LEFT);
    REQUIRE_OPP_DIFF(TTAC_LEFT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM_RIGHT, TTAC_TOP);
    REQUIRE_OPP_DIFF(TTAC_TOP, TTAC_BOTTOM_RIGHT);

    REQUIRE_OPP_DIFF(TTAC_BOTTOM_LEFT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF(TTAC_RIGHT, TTAC_BOTTOM_LEFT);
    REQUIRE_OPP_DIFF(TTAC_BOTTOM_LEFT, TTAC_TOP);
    REQUIRE_OPP_DIFF(TTAC_TOP, TTAC_BOTTOM_LEFT);

    // Negative opposite (false) — Edge <-> Corner that are adjacent
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_LEFT, TTAC_TOP_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_LEFT, TTAC_TOP);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP, TTAC_TOP_LEFT);

    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_RIGHT, TTAC_TOP_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP_RIGHT, TTAC_TOP);
    REQUIRE_OPP_DIFF_FALSE(TTAC_TOP, TTAC_TOP_RIGHT);

    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_RIGHT, TTAC_BOTTOM_RIGHT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_RIGHT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM, TTAC_BOTTOM_RIGHT);

    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_LEFT, TTAC_BOTTOM_LEFT);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM_LEFT, TTAC_BOTTOM);
    REQUIRE_OPP_DIFF_FALSE(TTAC_BOTTOM, TTAC_BOTTOM_LEFT);
  }
}
